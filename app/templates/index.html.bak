<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alpha Data</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --danger: #f72585;
            --dark: #1d3557;
            --light: #f8f9fa;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --blue-light: #dbeafe;
            --green-light: #d1fae5;
            --purple-light: #ede9fe;
            --orange-light: #ffedd5;
            --yellow-light: #fffbeb;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fb;
            color: #333;
            line-height: 1.6;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .logo i {
            font-size: 32px;
        }
        
        .logo h1 {
            font-size: 28px;
            font-weight: 700;
        }
        
        nav ul {
            display: flex;
            list-style: none;
            gap: 25px;
        }
        
        nav a {
            color: white;
            text-decoration: none;
            font-weight: 600;
            padding: 8px 15px;
            border-radius: 6px;
            transition: background 0.3s;
        }
        
        nav a:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .main-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            transition: transform 0.3s;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 18px 25px;
            font-size: 20px;
            font-weight: 600;
        }
        
        .card-body {
            padding: 25px;
        }
        
        .upload-area {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.3s;
            background: #fafbff;
            margin-bottom: 20px;
        }
        
        .upload-area:hover {
            border-color: var(--primary);
        }
        
        .upload-area i {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
            font-size: 16px;
        }
        
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 16px;
        }
        
        .btn:hover {
            background: var(--secondary);
        }
        
        .btn i {
            font-size: 16px;
        }
        
        .btn-green {
            background: #10b981;
        }
        
        .btn-green:hover {
            background: #059669;
        }
        
        .btn-orange {
            background: #f97316;
        }
        
        .btn-orange:hover {
            background: #ea580c;
        }
        
        .btn-purple {
            background: #8b5cf6;
        }
        
        .btn-purple:hover {
            background: #7c3aed;
        }
        
        .btn-yellow {
            background: #f59e0b;
        }
        
        .btn-yellow:hover {
            background: #d97706;
        }
        
        .btn-danger {
            background: #ef4444;
        }
        
        .btn-danger:hover {
            background: #dc2626;
        }
        
        .progress-container {
            margin-top: 20px;
            background: var(--light-gray);
            border-radius: 8px;
            overflow: hidden;
            display: none;
        }
        
        .progress-bar {
            height: 8px;
            background: var(--success);
            width: 0%;
            transition: width 0.5s;
        }
        
        .result-container {
            display: none;
            margin-top: 30px;
        }
        
        .score-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
        }
        
        .score-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .overall-score {
            font-size: 48px;
            font-weight: 700;
            color: var(--primary);
            position: relative;
        }
        
        .overall-score::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--success));
            border-radius: 2px;
        }
        
        .score-details {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }
        
        .score-item {
            text-align: center;
            padding: 15px;
            border-radius: 8px;
            background: #f8f9ff;
        }
        
        .score-item .label {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 5px;
        }
        
        .score-item .value {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .domain-info {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
            padding: 12px;
            background: #f0f9ff;
            border-radius: 8px;
            font-weight: 600;
        }
        
        .domain-tag {
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .domain-resume {
            background: #dbeafe;
            color: var(--primary);
        }
        
        .domain-job {
            background: #ffedd5;
            color: #f97316;
        }
        
        .domain-match {
            background: #d1fae5;
            color: #065f46;
        }
        
        .match-section {
            margin-top: 25px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        
        .match-section h2 {
            margin-bottom: 20px;
            color: var(--dark);
            font-size: 22px;
            border-bottom: 2px solid var(--light-gray);
            padding-bottom: 10px;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .info-item {
            padding: 12px;
            background: #f8f9ff;
            border-radius: 8px;
        }
        
        .info-item strong {
            display: block;
            margin-bottom: 5px;
            color: var(--gray);
        }
        
        .info-item span {
            font-weight: 500;
        }
        
        .skills-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        
        .skill-tag {
            display: inline-block;
            background: #e0e7ff;
            color: var(--primary);
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 14px;
        }
        
        .matched-skill {
            background: #d1fae5;
            color: #065f46;
            position: relative;
        }
        
        .matched-skill::after {
            content: 'âœ“';
            margin-left: 5px;
            font-weight: bold;
        }
        
        .match-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.03);
            border-left: 3px solid var(--primary);
        }
        
        .match-item .job-req {
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--dark);
        }
        
        .match-item .resume-match {
            color: #10b981;
            font-weight: 600;
        }
        
        .confidence {
            display: inline-block;
            background: #e0e7ff;
            color: var(--primary);
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            margin-left: 10px;
            font-weight: 600;
        }
        
        .spinner {
            display: none;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .hidden {
            display: none !important;
        }
        
        .error {
            color: #ef4444;
            font-weight: 600;
            padding: 10px;
            background: #fee2e2;
            border-radius: 6px;
            margin-top: 10px;
        }
        
        .token-usage {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--light-gray);
            font-size: 14px;
            color: var(--gray);
        }
        
        .token-usage span {
            font-weight: 600;
            margin-right: 15px;
        }
        
        .experience-item {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .experience-item h3 {
            font-size: 18px;
            margin-bottom: 5px;
            color: var(--dark);
        }
        
        .experience-item .company {
            font-weight: 600;
            color: var(--primary);
        }
        
        .experience-item .duration {
            color: var(--gray);
            font-size: 14px;
        }
        
        .experience-item ul {
            margin-top: 10px;
            padding-left: 20px;
        }
        
        .experience-item li {
            margin-bottom: 5px;
        }
        
        .project-item {
            margin-bottom: 15px;
        }
        
        .project-item h3 {
            font-size: 16px;
            margin-bottom: 5px;
        }
        
        .project-item .description {
            color: var(--gray);
        }
        
        /* Responsive adjustments */
        @media (max-width: 1200px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .score-details {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            nav ul {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-robot"></i>
                    <h1>Alpha Data Resume Analyzer</h1>
                </div>
                <nav>
                    <ul>
                        <li><a href="#" class="active"><i class="fas fa-home"></i> Dashboard</a></li>
                        <li><a href="#"><i class="fas fa-file-alt"></i> Resumes</a></li>
                        <li><a href="#"><i class="fas fa-briefcase"></i> Jobs</a></li>
                        <li><a href="#"><i class="fas fa-chart-line"></i> Analytics</a></li>
                        <li><a href="#"><i class="fas fa-cog"></i> <a href="{{ url_for('auth.logout') }}">Logout</a></a></li>
                    </ul>
                </nav>
            </div>
        </header>

        <div class="main-grid">
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-file-upload"></i> Upload Resume
                </div>
                <div class="card-body">
                    <div class="upload-area" id="resume-upload">
                        <i class="fas fa-file-pdf"></i>
                        <p>Drag & drop your resume (PDF or DOCX) or click to browse</p>
                        <button class="btn" id="resume-select-btn">
                            <i class="fas fa-upload"></i> Select Filef
                        </button>
                        <input type="file" id="resume-file" accept=".pdf,.docx" style="display: none;" multiple>
                    </div>
                    <div id="resume-filename" class="file-info"></div>
                    
                    <div class="flex space-x-3 mt-4">
                        <button id="uploadResumeBtn" class="btn flex-1">
                            <i class="fas fa-cloud-upload-alt"></i> Upload Resume
                        </button>
                        <button id="clearResumeBtn" class="btn btn-danger">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                    
                    <div class="progress-container" id="resume-progress-container">
                        <div class="progress-bar" id="resume-progress-bar"></div>
                    </div>
                    
                    <div class="result-container" id="resume-result-container">
                        <div class="score-card">
                            <div class="score-header">
                                <h2>Resume Details</h2>
                            </div>
                            
                            <div class="info-grid">
                                <div class="info-item">
                                    <strong>ID:</strong>
                                    <span id="resume-id">N/A</span>
                                </div>
                                <div class="info-item">
                                    <strong>Name:</strong>
                                    <span id="resume-name">N/A</span>
                                </div>
                                <div class="info-item">
                                    <strong>Email:</strong>
                                    <span id="resume-email">N/A</span>
                                </div>
                                <div class="info-item">
                                    <strong>Phone:</strong>
                                    <span id="resume-phone">N/A</span>
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-user"></i> Summary</h2>
                                <div id="resume-summary">
                                    <!-- Summary will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-star"></i> Skills</h2>
                                <div class="skills-list" id="resume-skills">
                                    <!-- Skills will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-briefcase"></i> Experience</h2>
                                <div id="resume-experience">
                                    <!-- Experience will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-graduation-cap"></i> Education</h2>
                                <div id="resume-education">
                                    <!-- Education will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-certificate"></i> Certifications</h2>
                                <div id="resume-certifications">
                                    <!-- Certifications will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-project-diagram"></i> Projects</h2>
                                <div id="resume-projects">
                                    <!-- Projects will be populated here -->
                                </div>
                            </div>
                            
                            <div class="token-usage" id="resume-token-usage">
                                <strong>Token Usage:</strong>
                                <span>Prompt: <span id="resume-prompt-tokens">0</span></span>
                                <span>Completion: <span id="resume-completion-tokens">0</span></span>
                                <span>Total: <span id="resume-total-tokens">0</span></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-file-upload"></i> Upload Job Description
                </div>
                <div class="card-body">
                    <div class="upload-area" id="job-upload">
                        <i class="fas fa-file-alt"></i>
                        <p>Drag & drop job description (PDF or DOCX) or click to browse</p>
                        <button class="btn" id="job-select-btn">
                            <i class="fas fa-upload"></i> Select File
                        </button>
                        <input type="file" id="job-file" accept=".pdf,.docx" style="display: none;">
                    </div>
                    <div id="job-filename" class="file-info"></div>
                    
                    <div class="flex space-x-3 mt-4">
                        <button id="uploadJobBtn" class="btn btn-green flex-1">
                            <i class="fas fa-cloud-upload-alt"></i> Upload Job
                        </button>
                        <button id="clearJobBtn" class="btn btn-danger">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                    
                    <div class="progress-container" id="job-progress-container">
                        <div class="progress-bar" id="job-progress-bar"></div>
                    </div>
                    
                    <div class="result-container" id="job-result-container">
                        <div class="score-card">
                            <div class="score-header">
                                <h2>Job Details</h2>
                            </div>
                            
                            <div class="info-grid">
                                <div class="info-item">
                                    <strong>ID:</strong>
                                    <span id="job-id">N/A</span>
                                </div>
                                <div class="info-item">
                                    <strong>Job Title:</strong>
                                    <span id="job-title">N/A</span>
                                </div>
                                <div class="info-item">
                                    <strong>Company:</strong>
                                    <span id="job-company">N/A</span>
                                </div>
                                <div class="info-item">
                                    <strong>Location:</strong>
                                    <span id="job-location">N/A</span>
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-info-circle"></i> Summary</h2>
                                <div id="job-summary">
                                    <!-- Job summary will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-star"></i> Required Skills</h2>
                                <div class="skills-list" id="job-skills">
                                    <!-- Skills will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-briefcase"></i> Experience Requirements</h2>
                                <div id="job-experience">
                                    <!-- Experience will be populated here -->
                                </div>
                            </div>
                            
                            <div class="match-section">
                                <h2><i class="fas fa-graduation-cap"></i> Education Requirements</h2>
                                <div id="job-education">
                                    <!-- Education will be populated here -->
                                </div>
                            </div>
                            
                            <div class="token-usage" id="job-token-usage">
                                <strong>Token Usage:</strong>
                                <span>Prompt: <span id="job-prompt-tokens">0</span></span>
                                <span>Completion: <span id="job-completion-tokens">0</span></span>
                                <span>Total: <span id="job-total-tokens">0</span></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <i class="fas fa-handshake"></i> Matching & Analysis
            </div>
            <div class="card-body">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <h3 class="text-lg font-semibold mb-3">Resume & Job Selection</h3>
                        <div class="space-y-4">
                            <div>
                                <label class="block mb-1">Resume ID:</label>
                                <input type="text" id="match-resume-id" class="w-full p-3 border rounded-lg" placeholder="Enter Resume ID">
                            </div>
                            <div>
                                <label class="block mb-1">Job ID:</label>
                                <input type="text" id="match-job-id" class="w-full p-3 border rounded-lg" placeholder="Enter Job ID">
                            </div>
                            <div class="flex space-x-3">
                                <button id="matchSpecificBtn" class="btn btn-purple flex-1">
                                    <i class="fas fa-link"></i> Match Specific
                                </button>
                                <button id="findTopResumesBtn" class="btn btn-purple flex-1">
                                    <i class="fas fa-search"></i> Find Top Candidates
                                </button>
                            </div>
                            <button id="generateQuestionsBtn" class="btn btn-yellow w-full">
                                <i class="fas fa-question-circle"></i> Generate Interview Questions
                            </button>
                        </div>
                    </div>
                    
                    <div id="match-results-container">
                        <div class="result-container" id="match-result-container">
                            <div class="score-card">
                                <div class="score-header">
                                    <h2>Matching Results</h2>
                                    <div class="overall-score" id="overall-score">0%</div>
                                </div>
                                
                                <div class="score-details">
                                    <div class="score-item">
                                        <div class="label">Skills Match</div>
                                        <div class="value" id="skills-score">0%</div>
                                    </div>
                                    <div class="score-item">
                                        <div class="label">Experience</div>
                                        <div class="value" id="exp-score">0%</div>
                                    </div>
                                    <div class="score-item">
                                        <div class="label">Education</div>
                                        <div class="value" id="edu-score">0%</div>
                                    </div>
                                    <div class="score-item">
                                        <div class="label">Domain Alignment</div>
                                        <div class="value" id="domain-score">0%</div>
                                    </div>
                                </div>
                                
                                <div class="domain-info">
                                    <div class="domain-tag domain-resume" id="resume-domain">Resume Domain</div>
                                    <i class="fas fa-arrow-right"></i>
                                    <div class="domain-tag domain-job" id="job-domain">Job Domain</div>
                                    <i class="fas fa-arrow-right"></i>
                                    <div class="domain-tag domain-match" id="domain-match">Match</div>
                                </div>
                                
                                <div class="match-section">
                                    <h2><i class="fas fa-star"></i> Matched Skills</h2>
                                    <div class="skills-list" id="matched-skills">
                                        <!-- Matched skills will be populated here -->
                                    </div>
                                </div>
                                
                                <div class="match-section">
                                    <h2><i class="fas fa-tasks"></i> Skill Match Details</h2>
                                    <div id="skill-match-details">
                                        <!-- Skill match details will be populated here -->
                                    </div>
                                </div>
                                
                                <div class="token-usage" id="match-token-usage">
                                    <strong>Token Usage:</strong>
                                    <span>Prompt: <span id="match-prompt-tokens">0</span></span>
                                    <span>Completion: <span id="match-completion-tokens">0</span></span>
                                    <span>Total: <span id="match-total-tokens">0</span></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="result-container" id="questions-result-container">
                            <div class="score-card">
                                <div class="score-header">
                                    <h2>Interview Questions</h2>
                                </div>
                                
                                <div class="match-section">
                                    <h2><i class="fas fa-code"></i> Technical Questions</h2>
                                    <div id="technical-questions">
                                        <!-- Technical questions will be populated here -->
                                    </div>
                                </div>
                                
                                <div class="match-section">
                                    <h2><i class="fas fa-comments"></i> Behavioral Questions</h2>
                                    <div id="behavioral-questions">
                                        <!-- Behavioral questions will be populated here -->
                                    </div>
                                </div>
                                
                                <div class="token-usage" id="questions-token-usage">
                                    <strong>Token Usage:</strong>
                                    <span>Prompt: <span id="questions-prompt-tokens">0</span></span>
                                    <span>Completion: <span id="questions-completion-tokens">0</span></span>
                                    <span>Total: <span id="questions-total-tokens">0</span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        // DOM Elements
const resumeUpload = document.getElementById('resume-upload');
const resumeFile = document.getElementById('resume-file');
const resumeSelectBtn = document.getElementById('resume-select-btn');
const resumeFilename = document.getElementById('resume-filename');
const uploadResumeBtn = document.getElementById('uploadResumeBtn');
const clearResumeBtn = document.getElementById('clearResumeBtn');
const resumeProgressContainer = document.getElementById('resume-progress-container');
const resumeProgressBar = document.getElementById('resume-progress-bar');
const resumeResultContainer = document.getElementById('resume-result-container');

const jobUpload = document.getElementById('job-upload');
const jobFile = document.getElementById('job-file');
const jobSelectBtn = document.getElementById('job-select-btn');
const jobFilename = document.getElementById('job-filename');
const uploadJobBtn = document.getElementById('uploadJobBtn');
const clearJobBtn = document.getElementById('clearJobBtn');
const jobProgressContainer = document.getElementById('job-progress-container');
const jobProgressBar = document.getElementById('job-progress-bar');
const jobResultContainer = document.getElementById('job-result-container');

const matchResumeId = document.getElementById('match-resume-id');
const matchJobId = document.getElementById('match-job-id');
const matchSpecificBtn = document.getElementById('matchSpecificBtn');
const findTopResumesBtn = document.getElementById('findTopResumesBtn');
const generateQuestionsBtn = document.getElementById('generateQuestionsBtn');
const matchResultContainer = document.getElementById('match-result-container');
const questionsResultContainer = document.getElementById('questions-result-container');

// Base URL for API
const API_BASE_URL = window.location.origin;

// Event Listeners for file selection
resumeSelectBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    resumeFile.click();
});

jobSelectBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    jobFile.click();
});

// File change handlers
resumeFile.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
        const fileNames = Array.from(e.target.files).map(file => file.name).join(', ');
        resumeFilename.textContent = `Selected: ${fileNames}`;
        resumeFilename.style.color = '#4361ee';
    }
});

jobFile.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
        jobFilename.textContent = `Selected: ${e.target.files[0].name}`;
        jobFilename.style.color = '#4361ee';
    }
});

// Main action buttons
uploadResumeBtn.addEventListener('click', uploadResumes);
clearResumeBtn.addEventListener('click', clearResumeResults);
uploadJobBtn.addEventListener('click', uploadJob);
clearJobBtn.addEventListener('click', clearJobResults);
matchSpecificBtn.addEventListener('click', matchResumeToJob);
findTopResumesBtn.addEventListener('click', findTopResumes);
generateQuestionsBtn.addEventListener('click', generateInterviewQuestions);

// Drag and drop functionality
[resumeUpload, jobUpload].forEach(area => {
    area.addEventListener('dragover', (e) => {
        e.preventDefault();
        area.style.borderColor = '#4361ee';
        area.style.backgroundColor = '#f0f4ff';
    });
    
    area.addEventListener('dragleave', () => {
        area.style.borderColor = '#ccc';
        area.style.backgroundColor = '#fafbff';
    });
    
    area.addEventListener('drop', (e) => {
        e.preventDefault();
        area.style.borderColor = '#ccc';
        area.style.backgroundColor = '#fafbff';
        
        if (e.dataTransfer.files.length > 0) {
            const file = e.dataTransfer.files[0];
            const isPdf = file.name.toLowerCase().endsWith('.pdf');
            const isDocx = file.name.toLowerCase().endsWith('.docx');
            
            if (isPdf || isDocx) {
                if (area.id === 'resume-upload') {
                    resumeFile.files = e.dataTransfer.files;
                    const fileNames = Array.from(e.dataTransfer.files).map(f => f.name).join(', ');
                    resumeFilename.textContent = `Selected: ${fileNames}`;
                    resumeFilename.style.color = '#4361ee';
                } else {
                    jobFile.files = e.dataTransfer.files;
                    jobFilename.textContent = `Selected: ${file.name}`;
                    jobFilename.style.color = '#4361ee';
                }
            } else {
                showError(area, 'Please upload a PDF or DOCX file');
            }
        }
    });
});
async function checkAuth() {
    try {
        const response = await fetch('/auth/check');
        if (!response.ok) {
            window.location.href = '/auth/login';
        }
    } catch (error) {
        window.location.href = '/auth/login';
    }
}


// Call this before making any authenticated requests
document.addEventListener('DOMContentLoaded', async function() {
    await checkAuth();
    
    // Other initialization code that depends on authentication
});
// Upload Resumes
async function uploadResumes() {
    if (!resumeFile.files.length) {
        showError(resumeFilename, 'Please select at least one resume file');
        return;
    }
    
    resumeProgressContainer.style.display = 'block';
    resumeResultContainer.style.display = 'none';
    
    const formData = new FormData();
    for (const file of resumeFile.files) {
        formData.append('file', file);
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/resumes/upload`, {
            method: 'POST',
            body: formData
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        if (data.error) {
            throw new Error(data.error);
        }
        
        // Display the first resume in the batch
        if (data.results && data.results.length > 0) {
            displayResumeDetails(data.results[0]);
        } else {
            throw new Error('No resumes processed');
        }
        
    } catch (error) {
        showError(resumeResultContainer, `Error: ${error.message}`);
    } finally {
        resumeProgressContainer.style.display = 'none';
    }
}

function displayResumeDetails(resumeData) {
    document.getElementById('resume-id').textContent = resumeData.resume_id;
    document.getElementById('resume-name').textContent = resumeData.extracted_entities.name || 'N/A';
    document.getElementById('resume-email').textContent = resumeData.extracted_entities.email || 'N/A';
    document.getElementById('resume-phone').textContent = resumeData.extracted_entities.phone || 'N/A';
    
    // Summary
    const summaryContainer = document.getElementById('resume-summary');
    if (resumeData.extracted_entities.summary_objective) {
        summaryContainer.innerHTML = `<p>${resumeData.extracted_entities.summary_objective}</p>`;
    } else {
        summaryContainer.innerHTML = '<div>No summary found</div>';
    }
    
    // Skills
    const skillsContainer = document.getElementById('resume-skills');
    skillsContainer.innerHTML = '';
    if (resumeData.extracted_entities.skills && resumeData.extracted_entities.skills.length) {
        resumeData.extracted_entities.skills.forEach(skill => {
            const skillEl = document.createElement('div');
            skillEl.className = 'skill-tag';
            skillEl.textContent = skill;
            skillsContainer.appendChild(skillEl);
        });
    } else {
        skillsContainer.innerHTML = '<div>No skills found</div>';
    }
    
    // Experience
    const experienceContainer = document.getElementById('resume-experience');
    experienceContainer.innerHTML = '';
    if (resumeData.extracted_entities.experience && resumeData.extracted_entities.experience.length) {
        resumeData.extracted_entities.experience.forEach(exp => {
            const expEl = document.createElement('div');
            expEl.className = 'experience-item';
            
            let expHtml = '';
            if (exp.title) {
                expHtml += `<h3>${exp.title}</h3>`;
            }
            if (exp.company) {
                expHtml += `<div class="company">${exp.company}</div>`;
            }
            if (exp.duration || exp.location) {
                expHtml += `<div class="duration">${exp.duration || ''} ${exp.location ? ' | ' + exp.location : ''}</div>`;
            }
            if (exp.responsibilities && exp.responsibilities.length) {
                expHtml += '<ul>';
                exp.responsibilities.forEach(resp => {
                    expHtml += `<li>${resp}</li>`;
                });
                expHtml += '</ul>';
            }
            
            expEl.innerHTML = expHtml;
            experienceContainer.appendChild(expEl);
        });
    } else {
        experienceContainer.innerHTML = '<div>No experience found</div>';
    }
    
    // Education
    const educationContainer = document.getElementById('resume-education');
    educationContainer.innerHTML = '';
    if (resumeData.extracted_entities.education && resumeData.extracted_entities.education.length) {
        resumeData.extracted_entities.education.forEach(edu => {
            const eduEl = document.createElement('div');
            eduEl.className = 'experience-item';
            
            let eduHtml = '';
            if (typeof edu === 'string') {
                eduHtml = `<p>${edu}</p>`;
            } else {
                if (edu.degree) {
                    eduHtml += `<h3>${edu.degree}</h3>`;
                }
                if (edu.institution) {
                    eduHtml += `<div class="company">${edu.institution}</div>`;
                }
                if (edu.location) {
                    eduHtml += `<div class="duration">${edu.location}</div>`;
                }
                if (edu.CGPA) {
                    eduHtml += `<div>CGPA: ${edu.CGPA}</div>`;
                }
            }
            
            eduEl.innerHTML = eduHtml;
            educationContainer.appendChild(eduEl);
        });
    } else {
        educationContainer.innerHTML = '<div>No education found</div>';
    }
    
    // Certifications
    const certContainer = document.getElementById('resume-certifications');
    certContainer.innerHTML = '';
    if (resumeData.extracted_entities.certifications && resumeData.extracted_entities.certifications.length) {
        resumeData.extracted_entities.certifications.forEach(cert => {
            const certEl = document.createElement('div');
            certEl.className = 'experience-item';
            certEl.innerHTML = `<p>${cert}</p>`;
            certContainer.appendChild(certEl);
        });
    } else {
        certContainer.innerHTML = '<div>No certifications found</div>';
    }
    
    // Projects
    const projectsContainer = document.getElementById('resume-projects');
    projectsContainer.innerHTML = '';
    if (resumeData.extracted_entities.projects && resumeData.extracted_entities.projects.length) {
        resumeData.extracted_entities.projects.forEach(proj => {
            const projEl = document.createElement('div');
            projEl.className = 'project-item';
            projEl.innerHTML = `<h3>${proj}</h3>`;
            projectsContainer.appendChild(projEl);
        });
    } else {
        projectsContainer.innerHTML = '<div>No projects found</div>';
    }
    
    // Token usage
    if (resumeData.llm_token_usage_refinement) {
        document.getElementById('resume-prompt-tokens').textContent = resumeData.llm_token_usage_refinement.prompt_tokens || 0;
        document.getElementById('resume-completion-tokens').textContent = resumeData.llm_token_usage_refinement.completion_tokens || 0;
        document.getElementById('resume-total-tokens').textContent = resumeData.llm_token_usage_refinement.total_tokens || 0;
    }
    
    resumeResultContainer.style.display = 'block';
    matchResumeId.value = resumeData.resume_id;
}

// Upload Job
async function uploadJob() {
    if (!jobFile.files.length) {
        showError(jobFilename, 'Please select a job description file');
        return;
    }
    
    jobProgressContainer.style.display = 'block';
    jobResultContainer.style.display = 'none';
    
    const formData = new FormData();
    formData.append('file', jobFile.files[0]);
    
    try {
        const response = await fetch(`${API_BASE_URL}/jobs/upload`, {
            method: 'POST',
            body: formData
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        if (data.error) {
            throw new Error(data.error);
        }
        
        displayJobDetails(data);
        
    } catch (error) {
        showError(jobResultContainer, `Error: ${error.message}`);
    } finally {
        jobProgressContainer.style.display = 'none';
    }
}

function displayJobDetails(jobData) {
    document.getElementById('job-id').textContent = jobData.job_id;
    document.getElementById('job-title').textContent = jobData.extracted_entities.job_title || 'N/A';
    document.getElementById('job-company').textContent = jobData.extracted_entities.company || 'N/A';
    document.getElementById('job-location').textContent = jobData.extracted_entities.location || 'N/A';
    
    // Summary
    const summaryContainer = document.getElementById('job-summary');
    if (jobData.extracted_entities.summary_objective) {
        summaryContainer.innerHTML = `<p>${jobData.extracted_entities.summary_objective}</p>`;
    } else {
        summaryContainer.innerHTML = '<div>No summary found</div>';
    }
    
    // Skills
    const skillsContainer = document.getElementById('job-skills');
    skillsContainer.innerHTML = '';
    if (jobData.extracted_entities.skills && jobData.extracted_entities.skills.length) {
        jobData.extracted_entities.skills.forEach(skill => {
            const skillEl = document.createElement('div');
            skillEl.className = 'skill-tag';
            skillEl.textContent = skill;
            skillsContainer.appendChild(skillEl);
        });
    } else {
        skillsContainer.innerHTML = '<div>No skills found</div>';
    }
    
    // Experience Requirements
    const experienceContainer = document.getElementById('job-experience');
    experienceContainer.innerHTML = '';
    if (jobData.extracted_entities.experience && jobData.extracted_entities.experience.length) {
        jobData.extracted_entities.experience.forEach((exp, index) => {
            const expEl = document.createElement('div');
            expEl.className = 'experience-item';
            
            let expHtml = '';
            if (typeof exp === 'string') {
                expHtml = `<p>${exp}</p>`;
            } else {
                if (exp.title) {
                    expHtml += `<h3>${exp.title}</h3>`;
                }
                if (exp.description) {
                    expHtml += `<p>${exp.description}</p>`;
                }
                if (exp.duration) {
                    expHtml += `<div class="duration">${exp.duration}</div>`;
                }
            }
            
            expEl.innerHTML = expHtml;
            experienceContainer.appendChild(expEl);
        });
    } else {
        experienceContainer.innerHTML = '<div>No experience requirements found</div>';
    }
    
    // Education Requirements
    const educationContainer = document.getElementById('job-education');
    educationContainer.innerHTML = '';
    if (jobData.extracted_entities.education && jobData.extracted_entities.education.length) {
        jobData.extracted_entities.education.forEach((edu, index) => {
            const eduEl = document.createElement('div');
            eduEl.className = 'experience-item';
            
            let eduHtml = '';
            if (typeof edu === 'string') {
                eduHtml = `<p>${edu}</p>`;
            } else {
                if (edu.degree) {
                    eduHtml += `<h3>${edu.degree}</h3>`;
                }
                if (edu.field) {
                    eduHtml += `<div>Field: ${edu.field}</div>`;
                }
                if (edu.institution) {
                    eduHtml += `<div>Institution: ${edu.institution}</div>`;
                }
            }
            
            eduEl.innerHTML = eduHtml;
            educationContainer.appendChild(eduEl);
        });
    } else {
        educationContainer.innerHTML = '<div>No education requirements found</div>';
    }
    
    // Languages (if present)
    if (jobData.extracted_entities.languages && jobData.extracted_entities.languages.length) {
        const languagesContainer = document.createElement('div');
        languagesContainer.className = 'match-section';
        languagesContainer.innerHTML = `
            <h2><i class="fas fa-language"></i> Language Requirements</h2>
            <div class="skills-list" id="job-languages"></div>
        `;
        jobResultContainer.querySelector('.score-card').appendChild(languagesContainer);
        
        const languagesList = document.getElementById('job-languages');
        jobData.extracted_entities.languages.forEach(lang => {
            const langEl = document.createElement('div');
            langEl.className = 'skill-tag';
            langEl.textContent = lang;
            languagesList.appendChild(langEl);
        });
    }
    
    // Token usage
    if (jobData.llm_token_usage) {
        document.getElementById('job-prompt-tokens').textContent = jobData.llm_token_usage.prompt_tokens || 0;
        document.getElementById('job-completion-tokens').textContent = jobData.llm_token_usage.completion_tokens || 0;
        document.getElementById('job-total-tokens').textContent = jobData.llm_token_usage.total_tokens || 0;
    }
    
    jobResultContainer.style.display = 'block';
    matchJobId.value = jobData.job_id;
}

// Match Resume to Job

function displayMatchDetails(matchData) {
    const details = matchData.match_details;

    // Set score values
    document.getElementById('overall-score').textContent = `${(details.scores.overall * 100).toFixed(2)}%`;
    document.getElementById('skills-score').textContent = `${(details.scores.skills * 100).toFixed(2)}%`;
    document.getElementById('exp-score').textContent = `${(details.scores.experience * 100).toFixed(2)}%`;
    document.getElementById('edu-score').textContent = `${(details.scores.education * 100).toFixed(2)}%`;
    document.getElementById('domain-score').textContent = `${(details.scores.domain_alignment * 100).toFixed(2)}%`;

    // Populate matched skills
    const matchedSkillsContainer = document.getElementById('matched-skills');
    matchedSkillsContainer.innerHTML = '';
    details.matched_skills.forEach(skill => {
        const el = document.createElement('div');
        el.className = 'skill-tag matched-skill';
        el.textContent = skill;
        matchedSkillsContainer.appendChild(el);
    });

    // Populate skill match details
    const skillDetailsContainer = document.getElementById('skill-match-details');
    skillDetailsContainer.innerHTML = '';
    details.skill_match_details.forEach(detail => {
        const item = document.createElement('div');
        item.className = 'match-item';
        item.innerHTML = `
            <div class="job-req">${detail.job_skill}</div>
            <div>
                <span class="resume-match">${detail.resume_skill}</span>
                <span class="confidence">${(detail.confidence * 100).toFixed(2)}% (${detail.match_type})</span>
            </div>`;
        skillDetailsContainer.appendChild(item);
    });

    // Show match container
    matchResultContainer.style.display = 'block';
    questionsResultContainer.style.display = 'none';
}

// Display top resumes for a job
function displayTopResumes(topResumes) {
    matchResultContainer.style.display = 'block';
    questionsResultContainer.style.display = 'none';

    const skillDetailsContainer = document.getElementById('skill-match-details');
    skillDetailsContainer.innerHTML = '<h3 class="text-lg font-semibold mb-3">Top Candidates</h3>';
    topResumes.forEach((resume, idx) => {
        const item = document.createElement('div');
        item.className = 'match-item';
        item.innerHTML = `
            <div class="flex justify-between items-center">
                <div>
                    <span class="job-req">${idx+1}. ${resume.candidate_name}</span>
                    <span class="resume-match">ID: ${resume.resume_id}</span>
                </div>
                <span class="confidence">${(resume.overall_score*100).toFixed(2)}%</span>
            </div>
            <div class="flex justify-between mt-2">
                <span>Skills: ${(resume.skills_score*100).toFixed(2)}%</span>
                <span>Exp: ${(resume.experience_score*100).toFixed(2)}%</span>
                <span>Edu: ${(resume.education_score*100).toFixed(2)}%</span>
                <span>Domain: ${(resume.domain_alignment*100).toFixed(2)}%</span>
            </div>`;
        skillDetailsContainer.appendChild(item);
    });
}

// Match a specific resume to a job
async function matchResumeToJob() {
    const resumeId = matchResumeId.value.trim();
    const jobId = matchJobId.value.trim();
    if (!resumeId || !jobId) {
        showError(matchResultContainer, 'Please enter both Resume ID and Job ID');
        return;
    }
    try {
        const resp = await fetch(`/jobs/match-specific/${jobId}/${resumeId}`);
        if (!resp.ok) throw new Error('Matching failed');
        const json = await resp.json();
        displayMatchDetails(json);
    } catch (e) {
        showError(matchResultContainer, e.message);
    }
}

// Generate Interview Questions
async function generateInterviewQuestions() {
    const resumeId = matchResumeId.value.trim();
    const jobId = matchJobId.value.trim();
    
    if (!resumeId || !jobId) {
        showError(questionsResultContainer, 'Please enter both Resume ID and Job ID');
        return;
    }
    
    questionsResultContainer.style.display = 'block';
    matchResultContainer.style.display = 'none';
    
    try {
        const response = await fetch(`${API_BASE_URL}/resumes/${resumeId}/generate-interview-questions/${jobId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        if (data.error) {
            throw new Error(data.error);
        }
        
        displayInterviewQuestions(data);
        
    } catch (error) {
        showError(questionsResultContainer, `Error: ${error.message}`);
    }
}

function displayInterviewQuestions(questionsData) {
    const techContainer = document.getElementById('technical-questions');
    techContainer.innerHTML = '';
    
    if (questionsData.interview_questions?.technical_questions?.length) {
        questionsData.interview_questions.technical_questions.forEach((q, i) => {
            const qEl = document.createElement('div');
            qEl.className = 'match-item';
            qEl.innerHTML = `<div class="job-req">${i + 1}. ${q}</div>`;
            techContainer.appendChild(qEl);
        });
    } else {
        techContainer.innerHTML = '<div>No technical questions generated</div>';
    }
    
    const behaviorContainer = document.getElementById('behavioral-questions');
    behaviorContainer.innerHTML = '';
    
    if (questionsData.interview_questions?.behavioral_questions?.length) {
        questionsData.interview_questions.behavioral_questions.forEach((q, i) => {
            const qEl = document.createElement('div');
            qEl.className = 'match-item';
            qEl.innerHTML = `<div class="job-req">${i + 1}. ${q}</div>`;
            behaviorContainer.appendChild(qEl);
        });
    } else {
        behaviorContainer.innerHTML = '<div>No behavioral questions generated</div>';
    }
    
    // Token usage
    if (questionsData.llm_token_usage_generation) {
        document.getElementById('questions-prompt-tokens').textContent = questionsData.llm_token_usage_generation.prompt_tokens || 0;
        document.getElementById('questions-completion-tokens').textContent = questionsData.llm_token_usage_generation.completion_tokens || 0;
        document.getElementById('questions-total-tokens').textContent = questionsData.llm_token_usage_generation.total_tokens || 0;
    }
}

// Helper functions
function clearResumeResults() {
    resumeFile.value = '';
    resumeFilename.textContent = '';
    resumeResultContainer.style.display = 'none';
    matchResumeId.value = '';
}

function clearJobResults() {
    jobFile.value = '';
    jobFilename.textContent = '';
    jobResultContainer.style.display = 'none';
    matchJobId.value = '';
}

function showError(container, message) {
    const existingError = container.querySelector('.error');
    if (existingError) existingError.remove();
    
    const errorEl = document.createElement('div');
    errorEl.className = 'error';
    errorEl.textContent = message;
    container.appendChild(errorEl);
    
    setTimeout(() => {
        errorEl.remove();
    }, 5000);
}
    </script>
</body>
</html>